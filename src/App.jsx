import { useState } from "react";
import { CheckCircle2, ArrowRight, Sparkles, Shield, Users, BookOpen, Clock, LineChart, Phone, Mail, MapPin, Star, MessageCircle, Menu, X, TrendingUp, Award, Zap, Globe, Lock, GraduationCap } from "lucide-react";

/**
 * EduCRM White‚ÄìBlue Landing Page (Gradient Edition)
 * ------------------------------------------------------------
 * - √Åp d·ª•ng 2 gradient ch·ªß ƒë·∫°o do b·∫°n cung c·∫•p:
 *   + primary: linear-gradient(135deg, #3B82F6, #06B6D4)
 *   + secondary: linear-gradient(135deg, #22D3EE, #3B82F6)
 * - ƒê√£ thay to√†n b·ªô inline gradient r·ªùi r·∫°c b·∫±ng token d√πng l·∫°i.
 * - Th√™m GButton, GBadge, GSection ƒë·ªÉ t√°i s·ª≠ d·ª•ng v√† ƒë·ªìng b·ªô style.
 */

const container = "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8";
const section = "py-16 sm:py-20";
const btn =
  "inline-flex items-center gap-2 rounded-2xl px-5 py-3 text-sm font-semibold transition shadow-sm";

// üåà Gradient tokens
const GRADIENTS = {
  primary: "linear-gradient(135deg, #3B82F6, #06B6D4)",
  secondary: "linear-gradient(135deg, #22D3EE, #3B82F6)",
};

// üîò Reusable gradient button
function GButton({ children, gradient = "secondary", className = "", as = "a", ...props }) {
  const Comp = as;
  return (
    <Comp
      {...props}
      className={`${btn} text-white shadow-lg hover:shadow-xl transform hover:scale-[1.02] ${className}`}
      style={{ background: GRADIENTS[gradient] }}
    >
      {children}
    </Comp>
  );
}

// üè∑Ô∏è Reusable gradient badge/pill
function GBadge({ children, gradient = "secondary", className = "" }) {
  return (
    <span
      className={`inline-flex items-center gap-2 rounded-full text-white px-3 py-1 text-xs font-medium shadow-sm ${className}`}
      style={{ background: GRADIENTS[gradient], border: "1px solid rgba(255,255,255,0.35)" }}
    >
      {children}
    </span>
  );
}

// üß± Section with gradient background
function GSection({ gradient = "primary", children, className = "", overlay = false }) {
  return (
    <section className={`relative overflow-hidden ${className}`} style={{ background: GRADIENTS[gradient] }}>
      {overlay && <div className="absolute inset-0 pointer-events-none" style={{ background: "radial-gradient(circle at 1px 1px, rgba(0,0,0,.18) 1px, transparent 0)", backgroundSize: "22px 22px", opacity: 0.12 }} />}
      {children}
    </section>
  );
}

function Navbar({ onOpenLogin }) {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  return (
    <header className="sticky top-0 z-50 bg-white/95 backdrop-blur-md supports-[backdrop-filter]:bg-white/80 border-b border-slate-200/60 shadow-sm">
      <div className={`${container} h-16 flex items-center justify-between`}>
        <div className="flex items-center gap-3">
          <div className="size-12 flex justify-center items-center">
            <img src="logo.png" alt="logo" />
          </div>
        </div>

        <nav className="hidden md:flex items-center gap-8 text-sm text-slate-700">
          <a className="hover:text-blue-700 transition-colors duration-200 font-medium" href="#features">T√≠nh nƒÉng</a>
          <a className="hover:text-blue-700 transition-colors duration-200 font-medium" href="#pricing">L·ª£i √≠ch</a>
          <a className="hover:text-blue-700 transition-colors duration-200 font-medium" href="#testimonials">ƒê√°nh gi√°</a>
          <a className="hover:text-blue-700 transition-colors duration-200 font-medium" href="#faq">FAQ</a>
          <a className="hover:text-blue-700 transition-colors duration-200 font-medium" href="#contact">Li√™n h·ªá</a>
        </nav>

        <div className="flex items-center gap-3">
          <a href="#contact" className="hidden sm:inline-flex items-center gap-2 border border-blue-200 text-blue-700 hover:bg-blue-50 hover:border-blue-300 rounded-xl px-4 py-2 text-sm font-medium transition-all duration-200">
            <MessageCircle size={16} />
            Li√™n h·ªá
          </a>

          <GButton
            as="a"
            href="#demo"
            onClick={(e) => { e.preventDefault(); onOpenLogin && onOpenLogin(); }}
            gradient="secondary"
            className="px-5 py-2.5"
          >
            <Zap size={16} />
            D√πng th·ª≠
          </GButton>

          <button
            className="md:hidden p-2 rounded-lg hover:bg-slate-100 transition-colors"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          >
            {mobileMenuOpen ? <X size={20} /> : <Menu size={20} />}
          </button>
        </div>
      </div>

      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <div className="md:hidden bg-white border-t border-slate-200 shadow-lg">
          <div className="px-4 py-4 space-y-3">
            <a className="block py-2 text-slate-700 hover:text-blue-700 font-medium transition-colors" href="#features" onClick={() => setMobileMenuOpen(false)}>T√≠nh nƒÉng</a>
            <a className="block py-2 text-slate-700 hover:text-blue-700 font-medium transition-colors" href="#pricing" onClick={() => setMobileMenuOpen(false)}>L·ª£i √≠ch</a>
            <a className="block py-2 text-slate-700 hover:text-blue-700 font-medium transition-colors" href="#testimonials" onClick={() => setMobileMenuOpen(false)}>ƒê√°nh gi√°</a>
            <a className="block py-2 text-slate-700 hover:text-blue-700 font-medium transition-colors" href="#faq" onClick={() => setMobileMenuOpen(false)}>FAQ</a>
            <a className="block py-2 text-slate-700 hover:text-blue-700 font-medium transition-colors" href="#contact" onClick={() => setMobileMenuOpen(false)}>Li√™n h·ªá</a>
            <div className="pt-3 border-t border-slate-200">
              <GButton as="a" href="#demo" className="block w-full justify-center">D√πng th·ª≠ mi·ªÖn ph√≠</GButton>
            </div>
          </div>
        </div>
      )}
    </header>
  );
}

function Hero({ onOpenLogin }) {
  return (
    <GSection gradient="primary" overlay className="text-slate-800">
      <div className={`${container} ${section} pt-16 pb-12`}>
        <div className="grid lg:grid-cols-2 gap-16 items-center">
          <div className="space-y-8">
            <div className="space-y-6">
              <div className="animate-fade-in-up" style={{animationDelay: '0.1s'}}>
                <GBadge gradient="secondary">
                  <Sparkles size={16} className="text-white animate-pulse" />
                  N·ªÅn t·∫£ng gi√°o d·ª•c th√¥ng minh
                </GBadge>
              </div>

              <div className="animate-fade-in-up" style={{animationDelay: '0.2s'}}>
                <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold leading-tight tracking-tight text-white">
                  <span className="block animate-slide-in-left" style={{animationDelay: '0.3s'}}>N·ªÅn T·∫£ng Gi√°o D·ª•c</span>
                  <span className="block bg-gradient-to-r from-white to-cyan-200 bg-clip-text text-transparent animate-slide-in-left" style={{animationDelay: '0.4s'}}>Th√¥ng Minh</span>
                  <span className="block animate-slide-in-left" style={{animationDelay: '0.5s'}}>H·ªó Tr·ª£ B·ªüi AI</span>
                </h1>
              </div>

              <div className="animate-fade-in-up" style={{animationDelay: '0.6s'}}>
                <p className="text-lg text-white/90 leading-relaxed max-w-2xl">
                  Cho c√°c trung t√¢m ngo·∫°i ng·ªØ ƒë·ªÉ t·ªëi ∆∞u v·∫≠n h√†nh v√† tƒÉng tr∆∞·ªüng b·ªÅn v·ªØng.
                  <span className="text-white font-semibold"> (EN, JP, KR, CN)</span>
                </p>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row gap-4 animate-fade-in-up" style={{animationDelay: '0.7s'}}>
              <GButton
                as="a"
                href="#demo"
                onClick={(e) => { e.preventDefault(); onOpenLogin && onOpenLogin(); }}
                gradient="secondary"
                className="hover:scale-105 transition-transform duration-300"
              >
                <Zap size={18} className="text-white animate-bounce" />
                D√πng th·ª≠ mi·ªÖn ph√≠
                <ArrowRight size={18} />
              </GButton>
              <a className={`${btn} border border-white/30 text-white hover:bg-white/10 transition backdrop-blur hover:scale-105`} href="#contact">
                <MessageCircle size={18} className="text-white" />
                Nh·∫≠n t∆∞ v·∫•n
              </a>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 pt-4 animate-fade-in-up" style={{animationDelay: '0.8s'}}>
              {[
                { icon: <Zap size={20} className="text-white animate-pulse"/>, text: "Tri·ªÉn khai nhanh" },
                { icon: <Lock size={20} className="text-white animate-pulse"/>, text: "B·∫£o m·∫≠t cao" },
                { icon: <Globe size={20} className="text-white animate-pulse"/>, text: "H·ªó tr·ª£ 24/7" },
              ].map((item, index) => (
                <div key={index} className="flex items-center gap-3 p-3 rounded-xl bg-white/20 border border-white/30 shadow-sm backdrop-blur hover:bg-white/30 hover:scale-105 transition-all duration-300">
                  {item.icon}
                  <span className="text-white font-medium">{item.text}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="relative lg:ml-8 animate-fade-in-right" style={{animationDelay: '0.9s'}}>
            <div className="absolute -inset-6 rounded-3xl bg-white/20 blur-xl animate-pulse"/>
            <div className="relative rounded-3xl overflow-hidden ring-1 ring-white/30 shadow-lg hover:shadow-2xl transition-all duration-500 hover:scale-105">
              <video src="video.mp4" autoPlay muted loop playsInline className="w-full h-96 object-cover"></video>
            </div>
          </div>
        </div>
      </div>
    </GSection>
  );
}

function Metrics() {
  const items = [
    {
      label: "Trung t√¢m s·ª≠ d·ª•ng",
      value: "500+",
      icon: <Users size={24} className="text-blue-600"/>,
      description: "Trung t√¢m gi√°o d·ª•c tin t∆∞·ªüng"
    },
    {
      label: "Ng∆∞·ªùi d√πng",
      value: "10k+",
      icon: <TrendingUp size={24} className="text-green-600"/>,
      description: "Ng∆∞·ªùi d√πng t√≠ch c·ª±c"
    },
    {
      label: "TƒÉng hi·ªáu su·∫•t",
      value: "+32%",
      icon: <Award size={24} className="text-purple-600"/>,
      description: "Hi·ªáu qu·∫£ v·∫≠n h√†nh"
    },
  ];
  return (
    <GSection gradient="primary" className="">
      <div className={`${container} ${section}`}>
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-white mb-4">S·ªë li·ªáu ·∫•n t∆∞·ª£ng</h2>
          <p className="text-lg text-white/90">Nh·ªØng con s·ªë ch·ª©ng minh hi·ªáu qu·∫£ c·ªßa XinKEdu</p>
        </div>
        <div className="grid sm:grid-cols-3 gap-8">
          {items.map((item, index) => (
            <div key={item.label} className="group relative animate-fade-in-up" style={{animationDelay: `${0.1 + index * 0.2}s`}}>
              <div className="rounded-3xl bg-white p-8 shadow-lg ring-1 ring-slate-200 hover:shadow-xl hover:ring-blue-200 transition-all duration-300 transform hover:-translate-y-2 hover:scale-105">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-2xl bg-slate-50 group-hover:bg-blue-50 transition-colors duration-300">
                    {item.icon}
                  </div>
                  <div className="text-right">
                    <p className="text-4xl font-bold text-slate-900 group-hover:text-blue-700 transition-colors duration-300">{item.value}</p>
                    <p className="text-sm text-slate-500">{item.description}</p>
                  </div>
                </div>
                <p className="text-lg font-semibold text-slate-700">{item.label}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </GSection>
  );
}

function ProductOverview() {
  return (
    <section id="overview" className="bg-white">
      <div className={`${container} ${section}`}>
        <div className="text-center max-w-2xl mx-auto">
          <h2 className="text-2xl sm:text-3xl font-bold text-slate-900">T·ªïng quan hi·ªáu su·∫•t</h2>
          <p className="mt-3 text-slate-600">Tr·ª±c quan d·ªØ li·ªáu doanh thu, t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi, t√¨nh tr·∫°ng l·ªõp & ƒë·ªôi ng≈©.</p>
        </div>
        <div className="mt-10 rounded-3xl overflow-hidden ring-1 ring-slate-200 shadow-sm">
          <img
            src="dashboard.png"
            alt="T·ªïng quan s·ªë li·ªáu v√† KPI c·ªßa XinKEdu"
            className=""
            loading="lazy"
            decoding="async"
          />
        </div>
      </div>
    </section>
  );
}

function FeatureRow({ reverse=false, title, desc, bullets, img, icon }) {
  return (
    <div className={`grid lg:grid-cols-2 gap-12 items-center ${reverse ? "lg:grid-flow-dense" : ""}`}>
      <div className={`${reverse ? "lg:col-start-2" : ""} animate-fade-in-left`}>
        <div className="group relative">
          <div className="absolute -inset-4 rounded-3xl bg-gradient-to-r from-slate-100/60 to-blue-100/40 blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          <div className="relative rounded-3xl overflow-hidden ring-1 ring-slate-200 shadow-md group-hover:shadow-lg group-hover:ring-blue-200 transition-all duration-500 bg-white hover:scale-105">
            <img
              src={img}
              alt={`${title} - minh h·ªça`}
              className="w-full h-64 sm:h-80 object-cover group-hover:scale-[1.02] transition-transform duration-700"
              loading="lazy"
              decoding="async"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          </div>
        </div>
      </div>
      <div className={`${reverse ? "lg:col-start-1" : ""} space-y-5 animate-fade-in-right`}>
        <div className="flex items-center gap-4">
          <div className="p-3 rounded-2xl bg-blue-50 text-blue-700 ring-1 ring-blue-100 hover:scale-110 transition-transform duration-300">
            {icon}
          </div>
          <h3 className="text-2xl sm:text-3xl font-semibold text-slate-900">{title}</h3>
        </div>
        <p className="text-base text-slate-600 leading-relaxed">{desc}</p>
        <ul className="space-y-4">
          {bullets.map((bullet, index) => (
            <li key={bullet} className="flex items-start gap-3 text-slate-700 group animate-fade-in-up" style={{animationDelay: `${0.1 + index * 0.1}s`}}>
              <div className="flex-shrink-0 mt-1">
                <CheckCircle2 className="text-emerald-600 group-hover:text-emerald-700 transition-colors duration-200 animate-pulse" size={18}/>
              </div>
              <span className="text-base group-hover:text-slate-900 transition-colors duration-200">{bullet}</span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}

function Features() {
  return (
    <section id="features" className="bg-white">
      <div className={`${container} ${section} space-y-24`}>
        <div className="text-center max-w-3xl mx-auto">
          <h2 className="text-3xl sm:text-4xl font-bold text-slate-900 mb-6">T√≠nh nƒÉng n·ªïi b·∫≠t</h2>
          <p className="text-xl text-slate-600">Gi·∫£i ph√°p to√†n di·ªán cho m·ªçi nhu c·∫ßu qu·∫£n l√Ω gi√°o d·ª•c</p>
        </div>

        {/* 1/ Trung t√¢m x·∫øp l·ªãch d·∫°y cho gi√°o vi√™n */}
        <FeatureRow
          title="X·∫øp l·ªãch d·∫°y cho gi√°o vi√™n"
          desc="S·∫Øp x·∫øp ca d·∫°y tr·ª±c quan, tr√°nh tr√πng ca v√† t·ª± ƒë·ªông nh·∫Øc l·ªãch qua Zalo/Email."
          bullets={[
            "L·ªãch tu·∫ßn/th√°ng, s·∫Øp x·∫øp ca d·∫°y",
            "C·∫£nh b√°o tr√πng ph√≤ng/gi·ªù/gi√°o vi√™n",
            "T·ª± ƒë·ªông nh·∫Øc l·ªãch & ƒë·ªïi ca nhanh",
          ]}
          img="schedule.png"
          icon={<Clock size={28} />}
        />

        {/* 2/ Gi√°o vi√™n T·∫°o ƒë·ªÅ thi b·∫±ng AI */}
        <FeatureRow
          reverse
          title="T·∫°o ƒë·ªÅ thi b·∫±ng AI (nhanh & th√¥ng minh)"
          desc="Sinh ƒë·ªÅ t·ª± ƒë·ªông theo ch·ªß ƒë·ªÅ, ƒë·ªô kh√≥, chu·∫©n ƒë·∫ßu ra. H·ªó tr·ª£ nhi·ªÅu lo·∫°i c√¢u h·ªèi v√† ch·∫•m ƒëi·ªÉm t·ª± ƒë·ªông."
          bullets={[
            "Sinh c√¢u h·ªèi: Tr·∫Øc nghi·ªám, ƒê√∫ng/Sai, ƒêi·ªÅn khuy·∫øt, T·ª± lu·∫≠n",
            "ƒêi·ªÅu ch·ªânh ƒë·ªô kh√≥, m·ª•c ti√™u k·ªπ nƒÉng",
            "Ch·∫•m ƒëi·ªÉm t·ª± ƒë·ªông + nh·∫≠n x√©t AI",
          ]}
          img="taode.png"
          icon={<BookOpen size={28} />}
        />

        {/* 3/ Gi√°o vi√™n T·∫°o ƒë·ªÅ thi b·∫±ng OCR ch·ª•p h√¨nh */}
        <FeatureRow
          title="T·∫°o ƒë·ªÅ thi t·ª´ ·∫£nh (OCR)"
          desc="Ch·ª•p/t·∫£i ·∫£nh ƒë·ªÅ thi gi·∫•y, h·ªá th·ªëng OCR & chu·∫©n h√≥a format, xu·∫•t ƒë·ªÅ trong v√†i gi√¢y."
          bullets={[
            "Nh·∫≠n di·ªán ch·ªØ Vi·ªát/EN ch√≠nh x√°c",
            "Chu·∫©n h√≥a b·ªë c·ª•c, random ph∆∞∆°ng √°n",
            "Xu·∫•t Word/PDF s·∫µn s√†ng in ·∫•n",
          ]}
          img="ocr.png"
          icon={<GraduationCap size={28} />}
        />

        {/* 4/ Gi√°o vi√™n check in / check out */}
        <FeatureRow
          reverse
          title="Check-in / Check-out d·∫°y h·ªçc"
          desc="ƒêi·ªÉm danh ca d·∫°y b·∫±ng m·ªôt ch·∫°m: GPS + ghi ch√∫ t·ª©c th·ªùi."
          bullets={[
            "Check-in theo v·ªã tr√≠ & th·ªùi gian",
            "X√°c th·ª±c, ghi ch√∫ ca d·∫°y",
            "T·ªïng h·ª£p b·∫£ng c√¥ng & ph·ª•c v·ª• t√≠nh l∆∞∆°ng",
          ]}
          img="checkin.png"
          icon={<Shield size={28} />}
        />

        {/* 5/ N·ªÅn t·∫£ng AI + chatbot h·ªó tr·ª£ Live */}
        <FeatureRow
          title="AI tr·ª£ gi·∫£ng Live & ph√¢n t√≠ch bu·ªïi d·∫°y"
          desc="Theo d√µi th·ªùi gian th·ª±c, g·ª£i √Ω t∆∞∆°ng t√°c, ƒë√°nh d·∫•u highlight & xu·∫•t b√°o c√°o l·ªõp h·ªçc."
          bullets={[
            "H·ªèi AI nh·ªØng ki·∫øn th·ª©c m·ªõi c√≥ trong bu·ªïi h·ªçc",
            "L·∫•y √Ω ki·∫øn ph·∫£n h·ªìi t·ª´ h·ªçc sinh",
            "B√°o c√°o sau bu·ªïi: highlight, to-do",
          ]}
          img="meeting.png"
          icon={<LineChart size={28} />}
        />

        {/* 6/ H·ªçc sinh thi & xem ƒëi·ªÉm online */}
        <FeatureRow
          reverse
          title="Thi & xem ƒëi·ªÉm online"
          desc="H·ªçc sinh l√†m b√†i tr√™n web/mobile, ch·ªëng gian l·∫≠n nh·∫π, xem ƒëi·ªÉm & l·ªùi gi·∫£i ngay sau khi n·ªôp."
          bullets={[
            "Ph√≤ng thi online theo l·ªãch",           
            "Xem ƒëi·ªÉm, ƒë√°p √°n & l·ªùi gi·∫£i",
            "√în t·∫≠p, t·ªïng h·ª£p ki·∫øn th·ª©c",
          ]}
          img="exam.jpg"
          icon={<CheckCircle2 size={28} />}
        />

        {/* --- T√≠nh nƒÉng ƒê·∫∑c bi·ªát --- */}
        <div className="space-y-8">
          <div className="text-center max-w-3xl mx-auto">
            <h3 className="text-2xl sm:text-3xl font-bold text-slate-900">T√≠nh nƒÉng ƒë·∫∑c bi·ªát</h3>
            <p className="mt-3 text-slate-600">
              B·ªô c√¥ng c·ª• n√¢ng cao gi√∫p trung t√¢m v·∫≠n h√†nh tr∆°n tru v√† minh b·∫°ch.
            </p>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
            {/* ƒê·∫∑c bi·ªát 1: CRM + Nh√¢n s·ª± */}
            <div className="group relative">
              <div className="absolute -inset-1 rounded-3xl bg-gradient-to-r from-blue-600/10 to-cyan-500/10 blur opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
              <div className="relative rounded-3xl bg-white p-8 shadow-lg ring-1 ring-slate-200 group-hover:shadow-xl group-hover:ring-blue-200 transition">
                <div className="flex items-center gap-3 mb-3">
                  <Shield className="text-blue-600" size={22} />
                  <p className="text-lg font-semibold text-slate-900">CRM & Qu·∫£n l√Ω nh√¢n s·ª±</p>
                </div>
                <ul className="space-y-2 text-slate-700">
                  <li>‚Ä¢ Qu·∫£n l√Ω lead/kh√°ch h√†ng, pipeline tuy·ªÉn sinh</li>
                  <li>‚Ä¢ H·ªì s∆° gi√°o vi√™n/nh√¢n s·ª±, ph√¢n quy·ªÅn chi ti·∫øt</li>
                  <li>‚Ä¢ KPI & b·∫£ng c√¥ng ƒë·ªìng b·ªô t·ª´ check-in/ca d·∫°y</li>
                </ul>
              </div>
            </div>

            {/* ƒê·∫∑c bi·ªát 2: K·∫ø to√°n */}
            <div className="group relative">
              <div className="absolute -inset-1 rounded-3xl bg-gradient-to-r from-blue-600/10 to-cyan-500/10 blur opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
              <div className="relative rounded-3xl bg-white p-8 shadow-lg ring-1 ring-slate-200 group-hover:shadow-xl group-hover:ring-blue-200 transition">
                <div className="flex items-center gap-3 mb-3">
                  <LineChart className="text-emerald-600" size={22} />
                  <p className="text-lg font-semibold text-slate-900">H·ªó tr·ª£ k·∫ø to√°n</p>
                </div>
                <ul className="space-y-2 text-slate-700">
                  <li>‚Ä¢ Thu h·ªçc ph√≠, c√¥ng n·ª£, phi·∫øu thu/chi</li>
                  <li>‚Ä¢ B√°o c√°o doanh thu ‚Äì chi ph√≠ theo l·ªõp, kh√≥a</li>
                  <li>‚Ä¢ Xu·∫•t file k·∫ø to√°n & ƒë·ªëi so√°t minh b·∫°ch</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        {/* --- End: T√≠nh nƒÉng ƒê·∫∑c bi·ªát --- */}
      </div>
    </section>
  );
}
function FeatureEvent({
  title = "Create the Real Event & Event Details",
  desc = "Quicklearn allows you to create genuine Events and Event Details whenever and how you want. It also includes:",
  bullets = ["Flexible Event Create", "Anytime Event Open & Close"],
  mainImg, // ·∫£nh n·ªÅn ch√≠nh (UI l·ªõn b√™n ph·∫£i) ‚Äî v√≠ d·ª•: '/img/event-main.png'
  gridImg, // ·∫£nh danh s√°ch nh·ªè ‚Äî v√≠ d·ª•: '/img/event-grid.png'
}) {
  return (
    <section className="relative mx-auto max-w-6xl px-4 py-16 sm:py-24">
      {/* trang tr√≠ n·ªÅn */}
      <div className="pointer-events-none absolute inset-0 -z-10">
        <div className="absolute right-24 top-24 h-24 w-24 rounded-full border-2 border-violet-100/60" />
        <div className="absolute right-12 top-56 grid h-16 w-16 grid-cols-4 gap-1 opacity-40">
          {Array.from({ length: 16 }).map((_, i) => (
            <span key={i} className="rounded-sm border border-fuchsia-200/60" />
          ))}
        </div>
        <svg className="absolute left-1/2 top-2/3 -translate-x-1/2 opacity-30" width="160" height="40" viewBox="0 0 160 40" fill="none">
          <path d="M2 30c12-22 28-22 40 0s28 22 40 0 28-22 40 0 28 22 36 0" stroke="#22c55e" strokeWidth="3" strokeLinecap="round" />
        </svg>
      </div>

      <div className="grid items-center gap-10 lg:grid-cols-2">
        {/* LEFT: text */}
        <div>
          <h2 className="text-3xl font-extrabold tracking-tight text-slate-900 sm:text-4xl">
            {title}
          </h2>
          <p className="mt-4 text-slate-600">{desc}</p>

          <ul className="mt-6 space-y-3">
            {bullets.map((b, i) => (
              <li key={i} className="flex items-start gap-3 text-slate-700">
                <span className="mt-1 inline-flex h-5 w-5 items-center justify-center rounded-full bg-indigo-600">
                  <svg viewBox="0 0 24 24" className="h-3.5 w-3.5 text-white">
                    <path fill="currentColor" d="M9.5 16.2 5.8 12.5l1.4-1.4 2.3 2.3 6.4-6.4 1.4 1.4z" />
                  </svg>
                </span>
                <span className="font-medium">{b}</span>
              </li>
            ))}
          </ul>
        </div>

        {/* RIGHT: stacked mockups */}
        <div className="relative mx-auto w-full max-w-xl">
          {/* card n·ªÅn l·ªõn */}
          <div className="relative rounded-2xl border border-slate-200 bg-white/90 shadow-xl backdrop-blur-sm">
            <div className="p-4 sm:p-6">
              {/* n·∫øu c√≥ ·∫£nh th·∫≠t */}
              {mainImg ? (
                <img
                  src={mainImg}
                  alt="Event UI"
                  className="h-64 w-full rounded-xl object-cover sm:h-72"
                />
              ) : (
                // mock UI
                <div className="h-64 w-full rounded-xl bg-gradient-to-br from-slate-50 to-violet-50 sm:h-72">
                  <div className="grid h-full grid-cols-12 gap-3 p-4">
                    <div className="col-span-4 space-y-3">
                      <div className="h-8 rounded-md bg-slate-200/80" />
                      <div className="h-8 rounded-md bg-slate-200/60" />
                      <div className="h-8 rounded-md bg-slate-200/40" />
                      <div className="h-8 rounded-md bg-slate-200/30" />
                    </div>
                    <div className="col-span-8 space-y-3">
                      {[...Array(4)].map((_, i) => (
                        <div key={i} className="flex items-center gap-3 rounded-lg bg-white p-3 shadow">
                          <div className="h-10 w-20 rounded bg-indigo-100" />
                          <div className="h-2 w-36 rounded bg-slate-200" />
                          <div className="ml-auto h-7 w-16 rounded bg-indigo-200" />
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* card ‚ÄúEvent Schedule‚Äù (t·∫ßng tr√™n, l·ªách ph·∫£i) */}
          <div className="absolute -bottom-8 right-2 w-[88%] translate-y-2 rounded-2xl border border-slate-200 bg-white shadow-2xl sm:right-6">
            <div className="border-b border-slate-100 px-5 py-3">
              <p className="text-sm font-semibold text-slate-900">Event Schedule</p>
            </div>
            <div className="divide-y divide-slate-100">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="flex items-center gap-3 px-5 py-3">
                  <span className="rounded-md bg-indigo-50 px-2 py-1 text-xs font-semibold text-indigo-700">
                    09:00 AM
                  </span>
                  <div className="h-2 w-40 rounded bg-slate-200" />
                  <div className="ml-auto flex -space-x-2">
                    {[...Array(3)].map((__, j) => (
                      <span key={j} className="h-6 w-6 rounded-full border border-white bg-slate-200" />
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* ticket nh·ªè n·ªïi ph√≠a tr∆∞·ªõc (t·∫ßng tr√™n c√πng, l·ªách tr√°i) */}
          <div className="absolute -left-4 bottom-10 w-[60%] rotate-1 rounded-2xl border border-slate-200 bg-white shadow-xl sm:-left-8">
            <div className="px-4 py-3">
              <p className="text-sm font-semibold text-slate-900">Ticket Fair</p>
              <p className="text-xs text-indigo-600">Gold <span className="text-slate-400">(Seats Available: 50)</span></p>
              <div className="mt-3 grid grid-cols-3 items-center gap-2">
                <span className="text-sm font-bold text-slate-900">$20.00</span>
                <div className="flex items-center justify-center gap-2">
                  <button className="h-8 w-8 rounded-md border border-slate-200 text-slate-600">‚àí</button>
                  <div className="h-8 w-8 rounded-md border border-slate-200 bg-slate-50 text-center leading-8">0</div>
                  <button className="h-8 w-8 rounded-md border border-slate-200 text-slate-600">+</button>
                </div>
                <span className="text-right text-sm font-semibold text-slate-900">$0.00</span>
              </div>
              <button className="mt-4 w-full rounded-lg bg-indigo-600 py-2 text-sm font-semibold text-white shadow hover:bg-indigo-700">
                Buy Ticket
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}


function PlanCard({ ribbon, gradient, price, unit, features, highlight=false }) {
  return (
    <div className={`relative rounded-2xl border ${highlight ? 'border-blue-200' : 'border-slate-200'} bg-white shadow-sm h-full flex flex-col hover:shadow-xl hover:scale-105 transition-all duration-300 group`}>
      <div className="px-6 py-8 flex flex-col flex-1">
        <div className="mb-4">
          <span className="inline-flex px-3 py-1 rounded-md text-xs font-semibold text-white group-hover:scale-110 transition-transform duration-300" style={{background: gradient}}>{ribbon}</span>
        </div>
        <div className="flex items-end gap-2 text-slate-900 group-hover:text-blue-600 transition-colors duration-300">
          <span className="text-5xl font-extrabold tracking-tight group-hover:scale-110 transition-transform duration-300">{price}</span>
          <div className="pb-2 leading-none">
            <span className="align-baseline text-lg font-bold">{unit}</span>
            <span className="block text-xs text-slate-500">/Th√°ng</span>
          </div>
        </div>
        <p className="mt-5 text-sm text-slate-600 group-hover:text-slate-700 transition-colors duration-300">
          G√≥i t√≠nh nƒÉng ph√π h·ª£p cho nhu c·∫ßu.
        </p>
        <ul className="mt-5 space-y-3 flex-1">
          {features.map((f, i) => (
            <li key={i} className="flex items-start gap-3 text-slate-700 text-sm group-hover:text-slate-800 transition-colors duration-300">
              <CheckCircle2 className="mt-0.5 text-emerald-600 group-hover:text-emerald-700 group-hover:scale-110 transition-all duration-300" size={16}/>
              <span>{f}</span>
            </li>
          ))}
        </ul>
        <div className="mt-auto pt-6"> {/* mt-7 -> mt-auto pt-6 ƒë·ªÉ CTA d√≠nh ƒë√°y */}
          <GButton as="button" className="w-full rounded-full justify-center" gradient={highlight ? 'secondary' : 'primary'}>
            MUA NGAY
          </GButton>
        </div>
      </div>
    </div>
  );
}


function Pricing(){
  const plans = [
    {
      ribbon: 'Basic',
      gradient: 'linear-gradient(135deg, #3B82F6, #06B6D4)',
      price: '800',
      unit: '000ƒë',
      features: [
        
        'Upload T√†i Li·ªáu < 10mb',
        'Ph√¢n t√≠ch t√†i li·ªáu b·∫±ng AI',
        'Overview t√†i li·ªáu',
        'T·∫°o ƒë·ªÅ thi AI t·ª´ t√†i li·ªáu',
        'ƒêa d·∫°ng lo·∫°i c√¢u h·ªèi',
        'Xem, Publish / Unpublish ƒë·ªÅ thi',
        'Ch·ªçn b√†i ki·ªÉm tra, xem ƒëi·ªÉm & ƒë√°p √°n',
        'Ghi nh·∫≠n bu·ªïi d·∫°y',
        'Qu·∫£n l√Ω l·ªõp h·ªçc, gi√°o vi√™n, h·ªçc sinh',
        'L√™n l·ªãch d·∫°y cho gi√°o vi√™n',
       
      ]
    },
    {
      ribbon: 'Advance',
      gradient: 'linear-gradient(135deg, #22D3EE, #3B82F6)',
      price: '1.299',
      unit: '000ƒë',
      features: [
        'Bao g·ªìm to√†n b·ªô Basic',
        'Live Teach (gi·∫£ng d·∫°y th·ªùi gian th·ª±c)',
        'AI Analysis n√¢ng cao',
        'T·∫£i t√†i li·ªáu l·ªõn > 10MB',
        'Ch·ªânh s·ª≠a c√¢u h·ªèi ƒë√£ sinh',
        'T·ª± t·∫°o ƒë·ªÅ √¥n t·∫≠p theo ch∆∞∆°ng/b√†i',
        'N√¢ng c·∫•p ch·∫•m ƒëi·ªÉm & ph·∫£n h·ªìi',
        'Qu·∫£n tr·ªã ƒë·ªÅ thi linh ho·∫°t (ng√¢n h√†ng c√¢u h·ªèi)',
        'Theo d√µi ti·∫øn ƒë·ªô h·ªçc theo l·ªõp/nh√≥m'
      ]
    },
    {
      ribbon: 'Premium',
      gradient: 'linear-gradient(135deg, #A855F7, #3B82F6)',
      price: '2.499',
      unit: '000ƒë',
      features: [
        'Bao g·ªìm to√†n b·ªô Advance',
        'Qu·∫£n l√Ω h·ªì s∆° nh√¢n vi√™n',
        'Ch·∫•m c√¥ng & t√≠nh l∆∞∆°ng',
        'B√°o c√°o hi·ªáu su·∫•t (KPI)',
        'Qu·∫£n l√Ω th√¥ng tin t√†i ch√≠nh',
        'D·ª± b√°o t√†i ch√≠nh',
        'Chatbot t∆∞ v·∫•n',
        'Ph√¢n quy·ªÅn chi ti·∫øt & nh·∫≠t k√Ω ho·∫°t ƒë·ªông',
        'H·ªó tr·ª£ ∆∞u ti√™n'
      ],
      
    },
    
  ];
  

  return (
    <GSection gradient="primary" className="py-16 sm:py-20">
      <div className={`${container}`}>
        <div className="text-center max-w-3xl mx-auto mb-10">
          <h2 className="text-3xl sm:text-4xl font-extrabold tracking-tight text-white animate-fade-in-up" style={{animationDelay: '0.1s'}}>B·∫£ng gi√°</h2>
          <p className="mt-3 text-white/90 animate-fade-in-up" style={{animationDelay: '0.2s'}}>Ch·ªçn g√≥i ph√π h·ª£p v·ªõi giai ƒëo·∫°n ph√°t tri·ªÉn c·ªßa trung t√¢m.</p>
        </div>

        {/* Grid 3 c·ªôt + nh·∫•n card gi·ªØa b·∫±ng arbitrary-variants */}
        <div
          className="
            grid gap-6 justify-center
            grid-cols-1
            sm:[grid-template-columns:repeat(2,22rem)]
            lg:[grid-template-columns:repeat(3,22rem)]
            [grid-auto-rows:1fr]
                    
          "
        >
          {plans.map((p, index) => (
            <div key={p.ribbon} className="h-full animate-fade-in-up" style={{animationDelay: `${0.1 + index * 0.2}s`}}>
              <PlanCard {...p} />
            </div>
          ))}
        </div>
      </div>
    </GSection>
  );
}

function CTAStrip() {
  return (
    <GSection gradient="secondary" id="cta">
      <div className={`${container} ${section} text-center`}>
        <h3 className="text-2xl sm:text-3xl font-semibold text-white animate-fade-in-up" style={{animationDelay: '0.1s'}}>ƒê∆°n gi·∫£n h√≥a qu·∫£n l√Ω ‚Äì t·∫≠p trung tƒÉng tr∆∞·ªüng</h3>
        <p className="mt-3 text-white/90 animate-fade-in-up" style={{animationDelay: '0.2s'}}>Ph√π h·ª£p cho trung t√¢m gi√°o d·ª•c m·ªçi quy m√¥. Kh√¥ng ph√≠ ·∫©n.</p>
        <div className="mt-6 flex flex-wrap justify-center gap-4">
          <div className="rounded-2xl bg-white ring-1 ring-slate-200 p-6 min-w-[220px] animate-fade-in-up hover:scale-105 hover:shadow-lg transition-all duration-300" style={{animationDelay: '0.3s'}}>
            <p className="text-sm text-slate-600">Hi·ªÉu r√µ kh√°ch h√†ng</p>
            <p className="mt-1 text-2xl font-bold text-slate-900">CRM</p>
          </div>
          <div className="rounded-2xl bg-white ring-1 ring-slate-200 p-6 min-w-[220px] animate-fade-in-up hover:scale-105 hover:shadow-lg transition-all duration-300" style={{animationDelay: '0.4s'}}>
            <p className="text-sm text-slate-600">T·ªëi ∆∞u v·∫≠n h√†nh</p>
            <p className="mt-1 text-2xl font-bold text-slate-900">Ops</p>
          </div>
          <div className="rounded-2xl bg-white ring-1 ring-slate-200 p-6 min-w-[220px] animate-fade-in-up hover:scale-105 hover:shadow-lg transition-all duration-300" style={{animationDelay: '0.5s'}}>
            <p className="text-sm text-slate-600">KPI ƒëo l∆∞·ªùng th·ª±c t·∫ø</p>
            <p className="mt-1 text-2xl font-bold text-slate-900">Analytics</p>
          </div>
        </div>
        <div className="mt-8 animate-fade-in-up" style={{animationDelay: '0.6s'}}>
          <GButton as="a" className="px-6 py-3 hover:scale-105 transition-transform duration-300" gradient="primary">B·∫Øt ƒë·∫ßu ngay <ArrowRight size={18}/></GButton>
        </div>
      </div>
    </GSection>
  );
}

function TestimonialCard({name, title, quote, avatar, className = "", style = {}}){
  return (
    <div className={`group relative ${className}`} style={style}>
      <div className="absolute -inset-1 rounded-3xl bg-gradient-to-r from-blue-600/20 to-indigo-600/20 blur opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
      <div className="relative rounded-3xl bg-white p-8 shadow-lg ring-1 ring-slate-200 group-hover:shadow-xl group-hover:ring-blue-200 transition-all duration-300 hover:scale-105">
        <div className="flex items-start gap-4 mb-6">
          <div className="flex-shrink-0">
            <div className="h-14 w-14 rounded-2xl bg-gradient-to-br from-blue-600 to-blue-700 flex items-center justify-center text-white font-bold text-lg shadow-lg">
              {avatar}
            </div>
          </div>
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-2">
              {[...Array(5)].map((_, i) => (
                <Star key={i} size={16} className="text-yellow-400 fill-current"/>
              ))}
            </div>
            <p className="font-bold text-slate-900 text-lg">{name}</p>
            <p className="text-slate-600 font-medium">{title}</p>
          </div>
        </div>
        <blockquote className="text-slate-700 leading-relaxed text-lg italic">
          "{quote}"
        </blockquote>
      </div>
    </div>
  );
}

function Testimonials(){
  const items = [
    {
      name: "Nguy·ªÖn H∆∞∆°ng",
      title: "Gi√°m ƒë·ªëc Trung t√¢m Alpha",
      quote: "EduCRM gi√∫p ƒë·ªôi ng≈© gi·∫£m 40% th·ªùi gian nh·∫≠p li·ªáu v√† theo d√µi h·ªçc vi√™n t·ªët h∆°n. Giao di·ªán th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng.",
      avatar: "NH"
    },
    {
      name: "Tr·∫ßn Minh",
      title: "Qu·∫£n l√Ω Tuy·ªÉn sinh",
      quote: "Pipeline r√µ r√†ng, t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi tƒÉng ƒë√°ng k·ªÉ ch·ªâ sau 2 tu·∫ßn s·ª≠ d·ª•ng. H·ªó tr·ª£ kh√°ch h√†ng r·∫•t nhi·ªát t√¨nh.",
      avatar: "TM"
    },
    {
      name: "L√™ Th·ªã Mai",
      title: "Hi·ªáu tr∆∞·ªüng Tr∆∞·ªùng THCS",
      quote: "T√≠nh nƒÉng qu·∫£n l√Ω l·ªõp h·ªçc v√† th·ªùi kh√≥a bi·ªÉu r·∫•t ti·ªán l·ª£i. Gi√∫p nh√† tr∆∞·ªùng v·∫≠n h√†nh hi·ªáu qu·∫£ h∆°n.",
      avatar: "LM"
    },
  ];
  return (
    <GSection gradient="primary" id="testimonials">
      <div className={`${container} ${section}`}>
        <div className="text-center max-w-3xl mx-auto mb-16">
          <h3 className="text-3xl sm:text-4xl font-bold text-white mb-6">Kh√°ch h√†ng n√≥i g√¨?</h3>
          <p className="text-xl text-white/90">Nh·ªØng ph·∫£n h·ªìi th·ª±c t·∫ø t·ª´ c√°c trung t√¢m ƒë√£ tri·ªÉn khai EduCRM</p>
        </div>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {items.map((t, index) => <TestimonialCard key={t.name} {...t} className={`animate-fade-in-up`} style={{animationDelay: `${0.1 + index * 0.2}s`}} />)}
        </div>
      </div>
    </GSection>
  );
}

function FAQ(){
  const [open, setOpen] = useState(0);
  const faqs = [
    {q:"XinKEdu tri·ªÉn khai th·∫ø n√†o?", a:"Ch√∫ng t√¥i h·ªó tr·ª£ tri·ªÉn khai nhanh trong 1‚Äì3 ng√†y l√†m vi·ªác c√πng h∆∞·ªõng d·∫´n chi ti·∫øt."},
    {q:"D·ªØ li·ªáu c√≥ an to√†n kh√¥ng?", a:"D·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a, sao l∆∞u ƒë·ªãnh k·ª≥ v√† tu√¢n th·ªß c√°c ti√™u chu·∫©n b·∫£o m·∫≠t ph·ªï bi·∫øn."},
    {q:"C√≥ g√≥i d√πng th·ª≠ kh√¥ng?", a:"B·∫°n c√≥ th·ªÉ d√πng th·ª≠ mi·ªÖn ph√≠ 14 ng√†y v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng c·ªët l√µi."},
  ];
  return (
    <section id="faq" className="bg-white">
      <div className={`${container} ${section}`}>
        <h3 className="text-2xl sm:text-3xl font-bold text-slate-900 text-center">C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h3>
        <div className="mt-8 max-w-3xl mx-auto divide-y divide-slate-200 rounded-2xl bg-white ring-1 ring-slate-200">
          {faqs.map((f, i) => (
            <button
              key={i}
              className="w-full text-left px-6 py-5 hover:bg-slate-50"
              onClick={() => setOpen(open === i ? -1 : i)}
            >
              <div className="flex items-center justify-between">
                <p className="font-medium text-slate-900">{f.q}</p>
                <span className="text-blue-600 font-semibold">{open === i ? "‚Äì" : "+"}</span>
              </div>
              {open === i && (
                <p className="mt-2 text-slate-600">{f.a}</p>
              )}
            </button>
          ))}
        </div>
      </div>
    </section>
  );
}

function Contact(){
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
    alert('C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24h.');
  };

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  return (
    <GSection gradient="secondary" id="contact">
      <div className={`${container} ${section}`}>
        <div className="grid lg:grid-cols-2 gap-16 items-start">
          <div className="space-y-8">
            <div>
              <h3 className="text-3xl sm:text-4xl font-bold text-white mb-6">Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£</h3>
              <p className="text-xl text-white/90 leading-relaxed">ƒêi·ªÅn th√¥ng tin ƒë·ªÉ nh·∫≠n t∆∞ v·∫•n v√† demo theo nhu c·∫ßu c·ªßa b·∫°n. Cam k·∫øt ph·∫£n h·ªìi trong 24h.</p>
            </div>

            

<div className="space-y-6">
  {/* HOTLINE */}
  <div className="group flex items-center gap-4 p-4 rounded-2xl bg-white/20 border border-white/30 backdrop-blur
                  transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl hover:bg-white/30">
    <div className="relative p-3 rounded-xl bg-white/30 text-white
                    transition-transform duration-300 group-hover:scale-110">
      {/* ping ch·∫•m tr·∫°ng th√°i */}
      <span className="absolute -right-1 -top-1 h-2 w-2 rounded-full bg-emerald-400">
        <span className="absolute inset-0 rounded-full bg-emerald-400 animate-ping" />
      </span>
      <Phone size={20} className="relative" />
    </div>
    <div className="transition-colors duration-300">
      <p className="font-semibold text-white">Hotline</p>
      <p className="text-white/90 font-medium">086.270.6996</p>
    </div>
    {/* glow vi·ªÅn khi hover */}
    <span className="pointer-events-none absolute inset-0 rounded-2xl ring-0 ring-white/0
                     group-hover:ring-2 group-hover:ring-white/40 transition-all duration-300" />
  </div>

  {/* EMAIL */}
  <div className="group flex items-center gap-4 p-4 rounded-2xl bg-white/20 border border-white/30 backdrop-blur
                  transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl hover:bg-white/30">
    <div className="relative p-3 rounded-xl bg-white/30 text-white
                    transition-transform duration-300 group-hover:scale-110">
      <Mail size={20} className="relative motion-safe:animate-pulse" />
    </div>
    <div className="transition-colors duration-300">
      <p className="font-semibold text-white">Email</p>
      <p className="text-white/90 font-medium">edu@xinkgroup.com</p>
    </div>
    <span className="pointer-events-none absolute inset-0 rounded-2xl ring-0 ring-white/0
                     group-hover:ring-2 group-hover:ring-white/40 transition-all duration-300" />
  </div>

  {/* ƒê·ªäA CH·ªà */}
  <div className="group flex items-center gap-4 p-4 rounded-2xl bg-white/20 border border-white/30 backdrop-blur
                  transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl hover:bg-white/30">
    <div className="relative p-3 rounded-xl bg-white/30 text-white
                    transition-transform duration-300 group-hover:scale-110">
      <MapPin size={20} className="relative" />
    </div>
    <div className="transition-colors duration-300">
      <p className="font-semibold text-white">ƒê·ªãa ch·ªâ</p>
      <p className="text-white/90 font-medium">ƒê√† N·∫µng, Vi·ªát Nam</p>
    </div>
    <span className="pointer-events-none absolute inset-0 rounded-2xl ring-0 ring-white/0
                     group-hover:ring-2 group-hover:ring-white/40 transition-all duration-300" />
  </div>
</div>

          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="rounded-3xl p-8 shadow-xl ring-1 ring-slate-200 bg-white">
              <h4 className="text-2xl font-bold text-slate-900 mb-6">G·ª≠i y√™u c·∫ßu t∆∞ v·∫•n</h4>

              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-semibold text-slate-700 mb-2">H·ªç v√† t√™n *</label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    required
                    className="w-full px-4 py-3 rounded-xl border-2 border-slate-200 focus:border-blue-600 focus:ring-4 focus:ring-blue-100 transition-all duration-200 text-slate-900 placeholder-slate-400"
                    placeholder="Nguy·ªÖn VƒÉn A"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold text-slate-700 mb-2">Email *</label>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    required
                    className="w-full px-4 py-3 rounded-xl border-2 border-slate-200 focus:border-blue-600 focus:ring-4 focus:ring-blue-100 transition-all duration-200 text-slate-900 placeholder-slate-400"
                    placeholder="ban@congty.com"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold text-slate-700 mb-2">Nhu c·∫ßu c·ªßa b·∫°n *</label>
                  <textarea
                    rows={4}
                    name="message"
                    value={formData.message}
                    onChange={handleChange}
                    required
                    className="w-full px-4 py-3 rounded-xl border-2 border-slate-200 focus:border-blue-600 focus:ring-4 focus:ring-blue-100 transition-all duration-200 text-slate-900 placeholder-slate-400 resize-none"
                    placeholder="M√¥ t·∫£ ng·∫Øn v·ªÅ trung t√¢m & nhu c·∫ßu tri·ªÉn khai"
                  />
                </div>
              </div>

              <GButton
  as="button"
  type="submit"
  className="w-full mt-8 text-lg py-4 font-bold flex items-center justify-center"
>
  <MessageCircle size={20} className="mr-2" />
  G·ª≠i y√™u c·∫ßu t∆∞ v·∫•n
</GButton>


              <p className="text-center text-sm text-slate-500 mt-4">
                Ch√∫ng t√¥i cam k·∫øt b·∫£o m·∫≠t th√¥ng tin c·ªßa b·∫°n.
              </p>
            </div>
          </form>
        </div>
      </div>
    </GSection>
  );
}

function Footer(){
  return (
    <footer className="bg-gradient-to-br from-slate-900 to-slate-800 text-slate-300">
      <div className={`${container} py-16`}>
        <div className="grid md:grid-cols-4 gap-8 mb-12">
          <div className="md:col-span-2">
            <div className="flex items-center gap-3 mb-6">
              <span className="font-bold text-white text-xl">XinKEdu</span>
            </div>
            <p className="text-slate-400 leading-relaxed mb-6 max-w-md">
              Gi·∫£i ph√°p to√†n di·ªán cho gi√°o d·ª•c. T·ªëi ∆∞u v·∫≠n h√†nh, tƒÉng tr∆∞·ªüng b·ªÅn v·ªØng.
            </p>
            <div className="flex gap-4">
              <div className="p-3 rounded-xl bg-slate-800 hover:bg-slate-700 transition-colors cursor-pointer">
                <Phone size={20} className="text-blue-400"/>
              </div>
              <div className="p-3 rounded-xl bg-slate-800 hover:bg-slate-700 transition-colors cursor-pointer">
                <Mail size={20} className="text-green-400"/>
              </div>
              <div className="p-3 rounded-xl bg-slate-800 hover:bg-slate-700 transition-colors cursor-pointer">
                <MapPin size={20} className="text-purple-400"/>
              </div>
            </div>
            <div className="mt-6 text-slate-400 text-sm space-y-2 max-w-xl">
              <p className="text-white font-semibold">C√îNG TY C·ªî PH·∫¶N XINKGROUP</p>
              <p>M√£ s·ªë doanh nghi·ªáp: 0402241823. Gi·∫•y ch·ª©ng nh·∫≠n ƒëƒÉng k√Ω doanh nghi·ªáp do S·ªü K·∫ø ho·∫°ch v√† ƒê·∫ßu t∆∞ TP ƒê√† N·∫µng c·∫•p l·∫ßn ƒë·∫ßu ng√†y 12/07/2024.</p>
              <p>ƒê·ªãa ch·ªâ: L√¥ 8B2, An Th∆∞·ª£ng 37, Ph∆∞·ªùng M·ªπ An, Qu·∫≠n Ng≈© H√†nh S∆°n, Th√†nh ph·ªë ƒê√† N·∫µng, Vi·ªát Nam</p>
            </div>
          </div>

          <div>
            <h4 className="font-bold text-white mb-6">S·∫£n ph·∫©m</h4>
            <ul className="space-y-3 text-slate-400">
              <li><a href="#features" className="hover:text-white transition-colors">T√≠nh nƒÉng</a></li>
              <li><a href="#pricing" className="hover:text-white transition-colors">L·ª£i √≠ch</a></li>
              <li><a href="#testimonials" className="hover:text-white transition-colors">ƒê√°nh gi√°</a></li>
              <li><a href="#demo" className="hover:text-white transition-colors">Demo</a></li>
            </ul>
          </div>

          <div>
            <h4 className="font-bold text-white mb-6">H·ªó tr·ª£</h4>
            <ul className="space-y-3 text-slate-400">
              <li><a href="#faq" className="hover:text-white transition-colors">FAQ</a></li>
              <li><a href="#contact" className="hover:text-white transition-colors">Li√™n h·ªá</a></li>
              <li><a href="#" className="hover:text-white transition-colors">T√†i li·ªáu</a></li>
              <li><a href="#" className="hover:text-white transition-colors">H∆∞·ªõng d·∫´n</a></li>
            </ul>
          </div>
        </div>

        <div className="border-t border-slate-700 pt-8">
          <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
            <div className="text-slate-400 text-sm">¬© 2025 XinKGroup. All rights reserved.</div>
            <div className="flex gap-6 text-slate-400 text-sm">
              <a className="hover:text-white transition-colors" href="#">ƒêi·ªÅu kho·∫£n</a>
              <a className="hover:text-white transition-colors" href="#">B·∫£o m·∫≠t</a>
              <a className="hover:text-white transition-colors" href="#">Ch√≠nh s√°ch</a>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
}

export default function EduCRMLanding(){
  const [loginOpen, setLoginOpen] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const onOpenLogin = () => setLoginOpen(true);
  const onCloseLogin = () => setLoginOpen(false);
  const onSubmitLogin = (e) => {
    e.preventDefault();
    if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      alert("Vui l√≤ng nh·∫≠p email h·ª£p l·ªá");
      return;
    }
    if (!password || password.length < 6) {
      alert("M·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±");
      return;
    }
    alert("ƒêƒÉng nh·∫≠p th√†nh c√¥ng (demo)");
    onCloseLogin();
  };

  return (
    <div className="bg-white text-slate-800">
      <Navbar onOpenLogin={onOpenLogin}/>
      <Hero onOpenLogin={onOpenLogin}/>

      <Metrics/>
      <ProductOverview/>
      <Features/>
      <Pricing/>
      <CTAStrip/>
      <Testimonials/>
      <FAQ/>
      <Contact/>
      <Footer/>

      {loginOpen && (
        <div className="fixed inset-0 z-[100] flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={onCloseLogin} />
          <div className="relative z-[101] w-full max-w-md mx-4">
            <div className="overflow-hidden rounded-2xl bg-white shadow-2xl ring-1 ring-slate-200">
              <div className="px-6 py-5 border-b border-slate-200 flex items-center justify-between">
                <h4 className="text-lg font-bold text-slate-900">ƒêƒÉng nh·∫≠p ƒë·ªÉ d√πng th·ª≠</h4>
                <button onClick={onCloseLogin} className="rounded-lg p-2 hover:bg-slate-100">
                  <X size={18}/>
                </button>
              </div>
              <form onSubmit={onSubmitLogin} className="px-6 py-6 space-y-5">
                <div>
                  <label className="block text-sm font-semibold text-slate-700 mb-2">Email</label>
                  <input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="ban@congty.com"
                    required
                    className="w-full px-4 py-3 rounded-xl border-2 border-slate-200 focus:border-blue-600 focus:ring-4 focus:ring-blue-100 outline-none transition"
                  />
                </div>
                <div>
                  <label className="block text-sm font-semibold text-slate-700 mb-2">M·∫≠t kh·∫©u</label>
                  <div className="relative">
                    <input
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      placeholder="T·ªëi thi·ªÉu 6 k√Ω t·ª±"
                      required
                      minLength={6}
                      className="w-full px-4 py-3 rounded-xl border-2 border-slate-200 focus:border-blue-600 focus:ring-4 focus:ring-blue-100 outline-none transition pr-12"
                    />
                    <button type="button" onClick={() => setShowPassword(!showPassword)} className="absolute inset-y-0 right-0 px-3 text-slate-500 hover:text-slate-700">
                      {showPassword ? "·∫®n" : "Hi·ªán"}
                    </button>
                  </div>
                </div>
                <GButton as="button" type="submit" className="w-full justify-center">ƒêƒÉng nh·∫≠p</GButton>
                <p className="text-center text-sm text-slate-500">Ch∆∞a c√≥ t√†i kho·∫£n? <a href="#" className="text-blue-600 hover:underline">ƒêƒÉng k√Ω</a></p>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
